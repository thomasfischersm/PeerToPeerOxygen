package com.playposse.peertopeeroxygen.backend.serveractions;

import com.googlecode.objectify.Key;
import com.googlecode.objectify.Ref;
import com.playposse.peertopeeroxygen.backend.schema.Domain;
import com.playposse.peertopeeroxygen.backend.schema.MasterUser;
import com.playposse.peertopeeroxygen.backend.schema.Mission;
import com.playposse.peertopeeroxygen.backend.schema.MissionLadder;
import com.playposse.peertopeeroxygen.backend.schema.MissionTree;
import com.playposse.peertopeeroxygen.backend.schema.OxygenUser;
import com.playposse.peertopeeroxygen.backend.schema.Practica;
import com.playposse.peertopeeroxygen.backend.schema.util.RefUtil;

import java.util.ArrayList;
import java.util.List;

import static com.googlecode.objectify.ObjectifyService.ofy;

/**
 * A server action that cleans the data generated by tests. This call queries a lot of data and is
 * expensive. So, there is a little pass code mechanisms to prevent a DoS attack.
 */
public class CleanTestDataServerAction extends ServerAction {

    private static final Long PASS_CODE = 389275931L;
    private static final String TEST_USER_NAME = "James Lucas";

    public static void cleanTestData(Long passCode) {
        if (!PASS_CODE.equals( passCode)) {
            // Silently return to avoid a hint for password guessing.
            return;
        }

        // We don't have the name field indexed. This may get too expensive at some point.
        List<MasterUser> masterUsers = ofy().load().type(MasterUser.class).list();
        List<MasterUser> testMasterUsers = new ArrayList<>();
        List<Ref<MasterUser>> testMasterUserRefs = new ArrayList<>();
        List<Key<OxygenUser>> testOxygenUserKeys = new ArrayList<>();

        // Find test users.
        for (MasterUser masterUser : masterUsers) {
            if (TEST_USER_NAME.equals(masterUser.getName())) {
                testMasterUsers.add(masterUser);
                testMasterUserRefs.add(RefUtil.createMasterUserRef(masterUser));

                for (Ref<OxygenUser> oxygenUserRef : masterUser.getDomainUserRefs()) {
                    testOxygenUserKeys.add(oxygenUserRef.getKey());
                }
            }
        }

        // Find domains owned by test users.
        List<Domain> domains =
                ofy().load().type(Domain.class).filter("ownerRef IN", testMasterUserRefs).list();
        List<Ref<Domain>> domainRefs = RefUtil.createDomainRefs(domains);

        // Find mission data in test domains.
        if (domainRefs.size() > 0) {
            List<MissionLadder> missionLadders =
                    ofy().load().type(MissionLadder.class).filter("domainRef IN", domainRefs).list();
            List<MissionTree> missionTrees =
                    ofy().load().type(MissionTree.class).filter("domainRef IN", domainRefs).list();
            List<Mission> missions =
                    ofy().load().type(Mission.class).filter("domainRef IN", domainRefs).list();

            // Nuke mission data.
            ofy().delete().entities(missions);
            ofy().delete().entities(missionTrees);
            ofy().delete().entities(missionLadders);
        }

        // Find practicas in test domains.
        List<Practica> practicas =
                ofy().load().type(Practica.class).filter("domainRef IN", domainRefs).list();
        if (practicas.size() > 0) {
            ofy().delete().entities(practicas);
        }

        // Nuke rest of all the data.
        ofy().delete().entities(domains);
        ofy().delete().entities(testMasterUsers);
        ofy().delete().keys(testOxygenUserKeys);
    }
}
